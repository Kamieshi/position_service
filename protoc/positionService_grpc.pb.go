// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protoc/positionService.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PositionsManagerClient is the client API for PositionsManager service_old.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionsManagerClient interface {
	OpenPosition(ctx context.Context, in *OpenPositionRequest, opts ...grpc.CallOption) (*OpenPositionResponse, error)
	ClosePosition(ctx context.Context, in *ClosePositionRequest, opts ...grpc.CallOption) (*ClosePositionResponse, error)
}

type positionsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionsManagerClient(cc grpc.ClientConnInterface) PositionsManagerClient {
	return &positionsManagerClient{cc}
}

func (c *positionsManagerClient) OpenPosition(ctx context.Context, in *OpenPositionRequest, opts ...grpc.CallOption) (*OpenPositionResponse, error) {
	out := new(OpenPositionResponse)
	err := c.cc.Invoke(ctx, "/positionService.PositionsManager/OpenPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionsManagerClient) ClosePosition(ctx context.Context, in *ClosePositionRequest, opts ...grpc.CallOption) (*ClosePositionResponse, error) {
	out := new(ClosePositionResponse)
	err := c.cc.Invoke(ctx, "/positionService.PositionsManager/_closePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionsManagerServer is the server API for PositionsManager service_old.
// All implementations must embed UnimplementedPositionsManagerServer
// for forward compatibility
type PositionsManagerServer interface {
	OpenPosition(context.Context, *OpenPositionRequest) (*OpenPositionResponse, error)
	ClosePosition(context.Context, *ClosePositionRequest) (*ClosePositionResponse, error)
	mustEmbedUnimplementedPositionsManagerServer()
}

// UnimplementedPositionsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPositionsManagerServer struct {
}

func (UnimplementedPositionsManagerServer) OpenPosition(context.Context, *OpenPositionRequest) (*OpenPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPosition not implemented")
}
func (UnimplementedPositionsManagerServer) ClosePosition(context.Context, *ClosePositionRequest) (*ClosePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method _closePosition not implemented")
}
func (UnimplementedPositionsManagerServer) mustEmbedUnimplementedPositionsManagerServer() {}

// UnsafePositionsManagerServer may be embedded to opt out of forward compatibility for this service_old.
// Use of this interface is not recommended, as added methods to PositionsManagerServer will
// result in compilation errors.
type UnsafePositionsManagerServer interface {
	mustEmbedUnimplementedPositionsManagerServer()
}

func RegisterPositionsManagerServer(s grpc.ServiceRegistrar, srv PositionsManagerServer) {
	s.RegisterService(&PositionsManager_ServiceDesc, srv)
}

func _PositionsManager_OpenPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionsManagerServer).OpenPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positionService.PositionsManager/OpenPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionsManagerServer).OpenPosition(ctx, req.(*OpenPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionsManager_ClosePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionsManagerServer).ClosePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positionService.PositionsManager/_closePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionsManagerServer).ClosePosition(ctx, req.(*ClosePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PositionsManager_ServiceDesc is the grpc.ServiceDesc for PositionsManager service_old.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "positionService.PositionsManager",
	HandlerType: (*PositionsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenPosition",
			Handler:    _PositionsManager_OpenPosition_Handler,
		},
		{
			MethodName: "_closePosition",
			Handler:    _PositionsManager_ClosePosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/positionService.proto",
}

// UsersManagerClient is the client API for UsersManager service_old.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersManagerClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	AddBalance(ctx context.Context, in *AddBalanceRequest, opts ...grpc.CallOption) (*AddBalanceResponse, error)
	GetAllUsers(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
}

type usersManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersManagerClient(cc grpc.ClientConnInterface) UsersManagerClient {
	return &usersManagerClient{cc}
}

func (c *usersManagerClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/positionService.UsersManager/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersManagerClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/positionService.UsersManager/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersManagerClient) AddBalance(ctx context.Context, in *AddBalanceRequest, opts ...grpc.CallOption) (*AddBalanceResponse, error) {
	out := new(AddBalanceResponse)
	err := c.cc.Invoke(ctx, "/positionService.UsersManager/AddBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersManagerClient) GetAllUsers(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, "/positionService.UsersManager/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersManagerServer is the server API for UsersManager service_old.
// All implementations must embed UnimplementedUsersManagerServer
// for forward compatibility
type UsersManagerServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	AddBalance(context.Context, *AddBalanceRequest) (*AddBalanceResponse, error)
	GetAllUsers(context.Context, *GetAllUserRequest) (*GetAllUsersResponse, error)
	mustEmbedUnimplementedUsersManagerServer()
}

// UnimplementedUsersManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUsersManagerServer struct {
}

func (UnimplementedUsersManagerServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersManagerServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersManagerServer) AddBalance(context.Context, *AddBalanceRequest) (*AddBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBalance not implemented")
}
func (UnimplementedUsersManagerServer) GetAllUsers(context.Context, *GetAllUserRequest) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUsersManagerServer) mustEmbedUnimplementedUsersManagerServer() {}

// UnsafeUsersManagerServer may be embedded to opt out of forward compatibility for this service_old.
// Use of this interface is not recommended, as added methods to UsersManagerServer will
// result in compilation errors.
type UnsafeUsersManagerServer interface {
	mustEmbedUnimplementedUsersManagerServer()
}

func RegisterUsersManagerServer(s grpc.ServiceRegistrar, srv UsersManagerServer) {
	s.RegisterService(&UsersManager_ServiceDesc, srv)
}

func _UsersManager_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersManagerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positionService.UsersManager/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersManagerServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersManager_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersManagerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positionService.UsersManager/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersManagerServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersManager_AddBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersManagerServer).AddBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positionService.UsersManager/AddBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersManagerServer).AddBalance(ctx, req.(*AddBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersManager_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersManagerServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positionService.UsersManager/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersManagerServer).GetAllUsers(ctx, req.(*GetAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersManager_ServiceDesc is the grpc.ServiceDesc for UsersManager service_old.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "positionService.UsersManager",
	HandlerType: (*UsersManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UsersManager_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UsersManager_CreateUser_Handler,
		},
		{
			MethodName: "AddBalance",
			Handler:    _UsersManager_AddBalance_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UsersManager_GetAllUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/positionService.proto",
}
